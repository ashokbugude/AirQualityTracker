{"ast":null,"code":"var _jsxFileName = \"/Users/ashok.bugude/Documents/_Never Backup/Ashok/AirQualityTracker/src/AirQuality.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Chart from './Chart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AirQuality = () => {\n  _s();\n\n  const [airQuality, setAirQuality] = useState([]);\n  const [rows, setRows] = useState(new Map([]));\n  const [cities, setCities] = useState([]);\n  useEffect(() => {\n    const ws = new WebSocket('ws://city-ws.herokuapp.com');\n\n    ws.onopen = () => {\n      ws.send({});\n    };\n\n    ws.onmessage = event => {\n      const response = JSON.parse(event.data);\n      console.log(response);\n\n      for (let i = 0; i < response.length; i++) {\n        let tempRows = rows;\n\n        if (!cities.includes(response[i].city)) {\n          let tmepCities = cities;\n          tmepCities = tmepCities.concat(response[i].city);\n          setCities(tmepCities);\n        }\n\n        if (tempRows.get(response[i].city)) {\n          let d = new Date().getTime();\n          let timeDiff = d - tempRows.get(response[i].city).updated;\n          let tempAirQualityData = null;\n\n          if (tempRows.get(response[i].city).airQualityData != null) {\n            tempAirQualityData = tempRows.get(response[i].city).airQualityData;\n            tempAirQualityData = tempAirQualityData.concat(Math.round(response[i].aqi * 100) / 100);\n          } else {\n            tempAirQualityData = [Math.round(response[i].aqi * 100) / 100];\n          }\n\n          tempRows.set(response[i].city, {\n            name: response[i].city,\n            aqi: Math.round(response[i].aqi * 100) / 100,\n            updated: new Date().getTime(),\n            lastUpdated: timeDiff,\n            airQualityData: tempAirQualityData\n          });\n        } else {\n          tempRows.set(response[i].city, {\n            name: response[i].city,\n            aqi: Math.round(response[i].aqi * 100) / 100,\n            updated: new Date().getTime(),\n            lastUpdated: 'now',\n            airQualityData: [Math.round(response[i].aqi * 100) / 100]\n          });\n        }\n\n        setRows(tempRows);\n      }\n\n      let tempAirQuality = [];\n      setAirQuality([]);\n      rows.forEach(item => {\n        let upSecs = Math.round(item.lastUpdated / 1000);\n        let upString = '';\n\n        if (upSecs == 0) {\n          upString = 'now';\n        } else {\n          upString = Math.round(item.lastUpdated / 1000) + ' seconds ago';\n        }\n\n        tempAirQuality = tempAirQuality.concat({\n          name: item.name,\n          aqi: item.aqi,\n          lastUpdated: upString,\n          airQualityData: item.airQualityData\n        });\n      });\n      setAirQuality(tempAirQuality); //setAirQuality(response);\n    };\n\n    ws.onclose = () => {\n      ws.close();\n    };\n\n    return () => {\n      ws.close();\n    };\n  });\n\n  function getBackgroundColor(num) {\n    if (num < 50) {\n      return 'green';\n    } else if (num < 100) {\n      return 'lightGreen';\n    } else if (num < 200) {\n      return 'yellow';\n    } else if (num < 300) {\n      return 'orange';\n    } else if (num < 400) {\n      return 'Crimson';\n    } else {\n      return 'red';\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"air-quality-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"City\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Current AQI\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Last updated\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }, this), airQuality.map(item => /*#__PURE__*/_jsxDEV(\"tr\", {\n          style: {\n            'backgroundColor': getBackgroundColor(item.aqi)\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.aqi\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.lastUpdated\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      rows: rows,\n      cities: cities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AirQuality, \"q3BjFmoFB/f47nzlV5S2Tf2RX4M=\");\n\n_c = AirQuality;\nexport default AirQuality;\n\nvar _c;\n\n$RefreshReg$(_c, \"AirQuality\");","map":{"version":3,"sources":["/Users/ashok.bugude/Documents/_Never Backup/Ashok/AirQualityTracker/src/AirQuality.js"],"names":["React","useState","useEffect","Chart","AirQuality","airQuality","setAirQuality","rows","setRows","Map","cities","setCities","ws","WebSocket","onopen","send","onmessage","event","response","JSON","parse","data","console","log","i","length","tempRows","includes","city","tmepCities","concat","get","d","Date","getTime","timeDiff","updated","tempAirQualityData","airQualityData","Math","round","aqi","set","name","lastUpdated","tempAirQuality","forEach","item","upSecs","upString","onclose","close","getBackgroundColor","num","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Chart from './Chart'\n\nconst AirQuality = () => {\n  const [airQuality, setAirQuality] = useState([]);\n  const [rows,setRows] = useState(new Map([]));\n  const [cities,setCities] = useState([])\n\n  useEffect(() => {\n    const ws = new WebSocket('ws://city-ws.herokuapp.com');\n\n    ws.onopen = () => {\n      ws.send({});\n    };\n    \n    ws.onmessage = (event) => {\n      const response = JSON.parse(event.data);\n      console.log(response)\n      for(let i=0;i<response.length;i++) {\n        let tempRows = rows\n        if(!cities.includes(response[i].city)) {\n            let tmepCities = cities\n            tmepCities = tmepCities.concat(response[i].city)\n            setCities(tmepCities)\n        }\n        if(tempRows.get(response[i].city)) {\n            let d = new Date().getTime()\n            let timeDiff = (d - tempRows.get(response[i].city).updated)\n            let tempAirQualityData = null\n            if(tempRows.get(response[i].city).airQualityData != null) {\n                tempAirQualityData = tempRows.get(response[i].city).airQualityData\n                tempAirQualityData = tempAirQualityData.concat(Math.round(response[i].aqi *100)/100)\n            } else {\n                tempAirQualityData = [Math.round(response[i].aqi *100)/100]\n            }\n            tempRows.set(response[i].city, {name: response[i].city,aqi : Math.round(response[i].aqi *100)/100, updated : new Date().getTime(), lastUpdated: timeDiff, airQualityData : tempAirQualityData})\n        } else {\n            tempRows.set(response[i].city, {name: response[i].city,aqi : Math.round(response[i].aqi *100)/100, updated : new Date().getTime(), lastUpdated: 'now', airQualityData: [Math.round(response[i].aqi *100)/100]})\n        }\n        setRows(tempRows)\n      }\n\n      let tempAirQuality = []\n      setAirQuality([])\n      rows.forEach((item) => {\n        let upSecs = Math.round(item.lastUpdated/1000)\n        let upString = ''\n        if(upSecs == 0) {\n            upString = 'now'\n        } else {\n            upString =  Math.round(item.lastUpdated/1000) + ' seconds ago'\n        }\n        tempAirQuality = tempAirQuality.concat({\n            name : item.name,\n            aqi : item.aqi,\n            lastUpdated : upString,\n            airQualityData : item.airQualityData\n        })\n      })\n      \n      setAirQuality(tempAirQuality)\n      //setAirQuality(response);\n    };\n    ws.onclose = () => {\n      ws.close();\n    };\n\n    return () => {\n      ws.close();\n    };\n  }, );\n  \nfunction getBackgroundColor(num) {\n    if(num < 50) {\n        return 'green'\n    } else if(num <100) {\n        return 'lightGreen'\n    } else if(num <200) {\n        return 'yellow'\n    } else if (num <300) {\n        return 'orange'\n    } else if(num <400) {\n        return 'Crimson'\n    } else {\n        return 'red'\n    }\n\n}\n\n  return (\n    <div className=\"air-quality-container\">\n      <table>\n        <tbody>\n        <tr>\n            <td><b>City</b></td>\n            <td><b>Current AQI</b></td>\n            <td><b>Last updated</b></td>\n        </tr>\n        {       \n            airQuality.map((item) => (\n                <tr style = {{'backgroundColor' : getBackgroundColor(item.aqi)}}>\n                    <td>{item.name}</td>\n                    <td>{item.aqi}</td>\n                    <td>{item.lastUpdated}</td>\n                </tr>\n            ))\n        }\n        </tbody>\n      </table>\n      <Chart\n        rows = {rows}\n        cities = {cities}\n      />\n    </div>\n  );\n};\n\nexport default AirQuality;\n"]},"metadata":{},"sourceType":"module"}